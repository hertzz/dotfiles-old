#!/usr/bin/env bash
#
# dotfiles
# https://github.com/hertzz/dotfiles
#

BASE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.."
HANDLERS_DIR="${BASE_DIR}/handlers"
HOME_DIRECTORY=${HOME_DIRECTORY:-"$HOME"}

. $BASE_DIR/config.sh

function dotfiles::main() {
  dotfiles::log info "Starting..."

  # Make sure at least 1 handler specified
  if [ ${#HANDLERS_ENABLED[@]} -lt 1 ]; then
    dotfiles::log error "No handlers have been specified in \"config.sh\""
    dotfiles::log error "See https://github.com/hertzz/dotfiles/README.md for more information" && exit 1
  fi

  # Test existence of home directory
  if [ ! -d $HOME_DIRECTORY ]; then
    dotfiles::log warn "Couldn't find the home directory (${HOME_DIRECTORY}), attempting to create..."

    mkdir -p $HOME_DIRECTORY &>/dev/null
    if [ $? -eq 0 ]; then
      dotfiles::log info "Created home directory \"${HOME_DIRECTORY}\""
    else
      dotfiles::log error "Couldn't create home directory \"${HOME_DIRECTORY}\""
      dotfiles::log error "You may not have appropriate permissions! Maybe try as sudo?" && exit 1
    fi
  fi

  # Bootstrap handlers specified in config
  for HANDLER in ${HANDLERS_ENABLED[*]}; do
    dotfiles::log info "Loading \"${HANDLER}\" handler..."
    if [ ! -d "${HANDLERS_DIR}/${HANDLER}" ]; then
      dotfiles::log error "Couldn't find \"${HANDLER}\" handler!" && exit 1
    else
      if [ ! -f "${HANDLERS_DIR}/${HANDLER}/${HANDLER}.sh" ]; then
        dotfiles::log error "Couldn't find \"${HANDLER}\" handler bootstrap!" && exit 1
      else
        . ${HANDLERS_DIR}/${HANDLER}/${HANDLER}.sh

        if ! $(declare -f dotfiles::${HANDLER}::init 2>&1 >/dev/null); then
          dotfiles::log error "Couldn't find constructor for \"${HANDLER}\" handler!" && exit 1
        else
          dotfiles::${HANDLER}::init
          dotfiles::__handler_setup_files "${HANDLER}"
        fi
      fi
    fi
  done
}

function dotfiles::log() {
  local TIME="$(date +%s)"
  local LEVEL="$(echo $1 | tr '[:lower:]' '[:upper:]')"
  local MESSAGE="$2"
  local GAP=""

  if [[ $LEVEL == "INFO" ]]; then
    GAP=" -- "
  elif [[ $LEVEL == "WARN" ]]; then
    GAP=" -- "
  elif [[ $LEVEL == "ERROR" ]]; then
    GAP="-- "
  fi

  echo "[dotfiles/${TIME}]  ${LEVEL} ${GAP} ${MESSAGE}"
}

function dotfiles::__handler_setup_files() {
  local HANDLER_NAME="$1"

  if [[ "x${HANDLER_NAME}" == "x" ]]; then
    dotfiles::log error "Handler name was not specified for setup_files call" && exit 1
  fi

  if [ ! -d $HANDLERS_DIR/$HANDLER_NAME ]; then
    dotfiles::log error "Couldn't find \"${HANDLER}\" handler!" && exit 1
  fi

  local SKIPPED_FILES=0
  for FILE in $(find $HANDLERS_DIR/$HANDLER_NAME/files -depth 1); do
    FILE_BASENAME="$(basename $FILE)"

    if [[ ${EXCLUDED_FILES[@]} =~ "${FILE_BASENAME}" ]]; then
      dotfiles::log warn "Skipping excluded file \"${FILE_BASENAME}\""
    else
      if [ -s $HOME_DIRECTORY/$FILE_BASENAME ]; then
        SKIPPED_FILES=$((SKIPPED_FILES+1))
      else
        ln -s $FILE $HOME_DIRECTORY/$FILE_BASENAME &>/dev/null
        if [ $? -ne 0 ]; then
          dotfiles::log error "Failed to link \"${FILE_BASENAME}\"!"
        else
          dotfiles::log info "Successfully linked \"${FILE_BASENAME}\" into ${HOME_DIRECTORY}!"
        fi
      fi
    fi
  done

  if [ $SKIPPED_FILES -gt 0 ]; then
    dotfiles::log info "Skipped ${SKIPPED_FILES} files..."
  fi

  dotfiles::log info "Finished linking files for \"${HANDLER_NAME}\" handler!"
}

dotfiles::main
